import logging
import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from sheets_manager import SheetsManager
from validators import validate_phone, validate_email
from bot_states import UserStates

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN environment variable is required")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
user_data = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ Google Sheets
sheets_manager = SheetsManager()

def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    keyboard = [
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")],
        [KeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"), KeyboardButton("üîÑ –û—á–∏—Å—Ç–∏—Ç—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

def get_cancel_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–º–µ–Ω—ã –∏ –ø—Ä–æ–ø—É—Å–∫–∞"""
    keyboard = [
        [KeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"), KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    user_states[user_id] = UserStates.MAIN_MENU
    user_data[user_id] = {"phone": "", "email": "", "name": "", "type": ""}
    
    welcome_message = (
        "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Google Sheets!\n\n"
        "–ù–∞–∂–º–∏—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö.\n"
        "–ë–æ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç:\n"
        "1Ô∏è‚É£ –¢–µ–ª–µ—Ñ–æ–Ω\n"
        "2Ô∏è‚É£ Email\n" 
        "3Ô∏è‚É£ –ò–º—è\n"
        "4Ô∏è‚É£ –¢–∞–π–ø\n\n"
        "–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü—É."
    )
    
    await update.message.reply_text(
        welcome_message,
        reply_markup=get_main_keyboard()
    )

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    user_id = update.effective_user.id
    text = update.message.text
    
    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å":
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        user_data[user_id] = {"phone": "", "email": "", "name": "", "type": ""}
        user_states[user_id] = UserStates.WAITING_PHONE
        await update.message.reply_text(
            "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +7 999 123-45-67)\n–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–µ –ø—É—Å—Ç—ã–º:",
            reply_markup=get_cancel_keyboard()
        )
    
    elif text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ":
        await show_current_data(update, context)
    
    elif text == "üîÑ –û—á–∏—Å—Ç–∏—Ç—å":
        user_data[user_id] = {"phone": "", "email": "", "name": "", "type": ""}
        await update.message.reply_text(
            "üîÑ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!",
            reply_markup=get_main_keyboard()
        )
    
    else:
        await show_current_data(update, context)

async def handle_phone_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    user_id = update.effective_user.id
    text = update.message.text
    
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        user_states[user_id] = UserStates.MAIN_MENU
        await update.message.reply_text(
            "–í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=get_main_keyboard()
        )
        return
    
    if text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        user_data[user_id]["phone"] = ""
        user_states[user_id] = UserStates.WAITING_EMAIL
        await update.message.reply_text(
            "‚è≠Ô∏è –¢–µ–ª–µ—Ñ–æ–Ω –ø—Ä–æ–ø—É—â–µ–Ω\n\n2Ô∏è‚É£ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã\n–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    if validate_phone(text):
        user_data[user_id]["phone"] = text
        user_states[user_id] = UserStates.WAITING_EMAIL
        await update.message.reply_text(
            f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {text}\n\n2Ô∏è‚É£ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã\n–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
            reply_markup=get_cancel_keyboard()
        )
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 999 123-45-67:",
            reply_markup=get_cancel_keyboard()
        )

async def handle_email_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ email"""
    user_id = update.effective_user.id
    text = update.message.text
    
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        user_states[user_id] = UserStates.MAIN_MENU
        await update.message.reply_text(
            "–í–≤–æ–¥ email –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=get_main_keyboard()
        )
        return
    
    if text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        user_data[user_id]["email"] = ""
        user_states[user_id] = UserStates.WAITING_NAME
        await update.message.reply_text(
            "‚è≠Ô∏è Email –ø—Ä–æ–ø—É—â–µ–Ω\n\n3Ô∏è‚É£ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–º—è\n–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    if validate_email(text):
        user_data[user_id]["email"] = text
        user_states[user_id] = UserStates.WAITING_NAME
        await update.message.reply_text(
            f"‚úÖ Email —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {text}\n\n3Ô∏è‚É£ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–º—è\n–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
            reply_markup=get_cancel_keyboard()
        )
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:",
            reply_markup=get_cancel_keyboard()
        )

async def handle_name_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    user_id = update.effective_user.id
    text = update.message.text
    
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        user_states[user_id] = UserStates.MAIN_MENU
        await update.message.reply_text(
            "–í–≤–æ–¥ –∏–º–µ–Ω–∏ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=get_main_keyboard()
        )
        return
    
    if text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        user_data[user_id]["name"] = ""
        user_states[user_id] = UserStates.WAITING_TYPE
        await update.message.reply_text(
            "‚è≠Ô∏è –ò–º—è –ø—Ä–æ–ø—É—â–µ–Ω–æ\n\n4Ô∏è‚É£ –ù–∞–∫–æ–Ω–µ—Ü, –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–ø\n–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    if text.strip():
        user_data[user_id]["name"] = text.strip()
        user_states[user_id] = UserStates.WAITING_TYPE
        await update.message.reply_text(
            f"‚úÖ –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {text.strip()}\n\n4Ô∏è‚É£ –ù–∞–∫–æ–Ω–µ—Ü, –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–ø\n–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
            reply_markup=get_cancel_keyboard()
        )
    else:
        await update.message.reply_text(
            "‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
            reply_markup=get_cancel_keyboard()
        )

async def handle_type_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–∏–ø–∞"""
    user_id = update.effective_user.id
    text = update.message.text
    
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        user_states[user_id] = UserStates.MAIN_MENU
        await update.message.reply_text(
            "–í–≤–æ–¥ —Ç–∏–ø–∞ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=get_main_keyboard()
        )
        return
    
    if text == "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        user_data[user_id]["type"] = ""
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø—Ä–æ–ø—É—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—è
        await save_data(update, context)
        return
    
    if text.strip():
        user_data[user_id]["type"] = text.strip()
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—è
        await save_data(update, context)
    else:
        await update.message.reply_text(
            "‚ùå –¢–∏–ø –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
            reply_markup=get_cancel_keyboard()
        )

async def show_current_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    user_id = update.effective_user.id
    data = user_data.get(user_id, {"phone": "", "email": "", "name": "", "type": ""})
    
    status_message = "üìã –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
    status_message += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone'] or '‚ùå –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}\n"
    status_message += f"üìß Email: {data['email'] or '‚ùå –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}\n"
    status_message += f"üë§ –ò–º—è: {data['name'] or '‚ùå –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}\n"
    status_message += f"üè∑Ô∏è –¢–∏–ø: {data['type'] or '‚ùå –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}\n\n"
    status_message += "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ."
    
    await update.message.reply_text(
        status_message,
        reply_markup=get_main_keyboard()
    )

async def save_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets"""
    user_id = update.effective_user.id
    data = user_data.get(user_id, {"phone": "", "email": "", "name": "", "type": ""})
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets
        success = sheets_manager.add_row([data["phone"], data["email"], data["name"], data["type"]])
        
        if success:
            user_states[user_id] = UserStates.MAIN_MENU
            await update.message.reply_text(
                "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Google Sheets!\n\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
                f"Email: {data['email']}\n"
                f"–ò–º—è: {data['name']}\n"
                f"–¢–∏–ø: {data['type']}\n\n"
                "–ù–∞–∂–º–∏—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å' –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏.",
                reply_markup=get_main_keyboard()
            )
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            user_data[user_id] = {"phone": "", "email": "", "name": "", "type": ""}
        else:
            user_states[user_id] = UserStates.MAIN_MENU
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard()
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        user_states[user_id] = UserStates.MAIN_MENU
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö
    if user_id not in user_states:
        user_states[user_id] = UserStates.MAIN_MENU
        user_data[user_id] = {"phone": "", "email": "", "name": "", "type": ""}
    
    current_state = user_states[user_id]
    
    if current_state == UserStates.MAIN_MENU:
        await handle_main_menu(update, context)
    elif current_state == UserStates.WAITING_PHONE:
        await handle_phone_input(update, context)
    elif current_state == UserStates.WAITING_EMAIL:
        await handle_email_input(update, context)
    elif current_state == UserStates.WAITING_NAME:
        await handle_name_input(update, context)
    elif current_state == UserStates.WAITING_TYPE:
        await handle_type_input(update, context)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")
    
    if update and update.effective_message:
        await update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.",
            reply_markup=get_main_keyboard()
        )

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
